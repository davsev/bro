<?php

/**
 * The file that defines the core plugin class
 *
 * A class definition that includes attributes and functions used across both the
 * public-facing side of the site and the admin area.
 *
 * Also maintains the unique identifier of this plugin as well as the current
 * version of the plugin.
 *
 * @link       https://cobweb-security.com
 * @since      1.0.0
 *
 * @package    Cwis
 * @subpackage Cwis/includes
 * @author     Cobweb Security <cwis@cobweb-security.com>
 */
class Cwis extends Cwis_Foundation
{

    /**
     * The loader that's responsible for maintaining and registering all hooks that power
     * the plugin.
     *
     * @since    1.0.0
     * @access   protected
     * @var      Cwis_Loader    $loader    Maintains and registers all hooks for the plugin.
     */
    protected $loader;

    /**
     * Define the core functionality of the plugin.
     *
     * Set the plugin name and the plugin version that can be used throughout the plugin.
     * Load the dependencies, define the locale, and set the hooks for the admin area and
     * the public-facing side of the site.
     *
     * @since    1.0.0
     */
    public function __construct($plugin_name, $version)
    {
        parent::__construct($plugin_name, $version);

        $this->load_dependencies();
        $this->define_admin_hooks();
        $this->define_ajax_hooks();
        $this->define_cron_hooks();
        $this->define_updater_hooks();
    }

    /**
     * Load the required dependencies for this plugin.
     *
     * Include the following files that make up the plugin:
     *
     * - Cwis_Loader. Orchestrates the hooks of the plugin.
     * - Cwis_Admin. Defines all hooks for the admin area.
     * - Cwis_Ajax, Cwis_Cron and Cwis_Updater. Defines all actions.
     *
     * Create an instance of the loader which will be used to register the hooks
     * with WordPress.
     *
     * @since    1.0.0
     * @access   private
     */
    private function load_dependencies()
    {
        $plugin_path = plugin_dir_path(dirname(__FILE__));

        /**
         * The class responsible for orchestrating the actions and filters 
         * of the core plugin.
         */
        require_once $plugin_path . 'includes/class-cwis-loader.php';

        /**
         * The class responsible for defining all actions that occur in the admin area.
         */
        require_once $plugin_path . 'admin/class-cwis-admin.php';

        /**
         * The classes responsible for defining all actions related 
         * to ajax calls, cron jobs and plugin auto updates.
         */
        require_once $plugin_path . 'includes/class-cwis-ajax.php';
        require_once $plugin_path . 'includes/class-cwis-cron.php';
        require_once $plugin_path . 'includes/class-cwis-updater.php';

        $this->loader = new Cwis_Loader();
    }

    /**
     * Register all of the hooks related to the admin area functionality
     * of the plugin.
     *
     * @since    1.0.0
     * @access   private
     */
    private function define_admin_hooks()
    {
        $cwis_admin_class = $this->get_class_instance('Cwis_Admin');

        // --- MENUS ---
        // Register the "enqueue_admin_bar_menu" function using the admin_bar_menu action hook.
        $this->loader->add_action('admin_bar_menu', $cwis_admin_class, 'enqueue_admin_bar_menu', 70);

        // Register the scanner menu-building functions using the admin_menu action hook.
        $this->loader->add_action('admin_menu', $cwis_admin_class, 'enqueue_scanner_application_menu');
        $this->loader->add_action('admin_menu', $cwis_admin_class, 'enqueue_scanner_settings_menu');

        // --- NOTICES ---
        // Register the "enqueue_plugin_notices" function using the admin_notices action hook.
        $this->loader->add_action((is_multisite() ? 'network_' : '') . 'admin_notices', $cwis_admin_class,
                                  'enqueue_plugin_notices');

        // --- CSS & JS ---
        // Register scripts and styles to include using the admin_enqueue_scripts action hook.
        $this->loader->add_action('admin_enqueue_scripts', $cwis_admin_class, 'enqueue_styles');
        $this->loader->add_action('admin_enqueue_scripts', $cwis_admin_class, 'enqueue_scripts');

        // --- OPTIONS ---
        // Register the "update_scanner_options" function using the admin_enqueue_scripts action hook.
        $this->loader->add_action('admin_enqueue_scripts', $cwis_admin_class, 'update_scanner_options');

        // --- SECURITY HARDENING ---
        // Removes WordPress version number from the document header and RSS feeds.
        $this->loader->add_action('init', $cwis_admin_class, 'remove_wp_generator');
    }

    /**
     * Register all of the hooks related to the AJAX CALLS functionality
     * of the plugin.
     *
     * @since   3.3.3
     * @access   private
     */
    private function define_ajax_hooks()
    {
        $cwis_ajax_class = $this->get_class_instance('Cwis_Ajax');

        // Register a PHP function to handle the AJAX requests (with action="cwis_scanner").
        $this->loader->add_action('wp_ajax_cwis_scanner', $cwis_ajax_class, 'cwis_scanner_ajax_callback');
    }

    /**
     * Register all of the hooks related to the CRON JOB functionality
     * of the plugin.
     *
     * @since   3.3.3
     * @access   private
     */
    private function define_cron_hooks()
    {
        $cwis_cron_class = $this->get_class_instance('Cwis_Cron');

        // Creating custom cron jobs schedule interval of 60 seconds.
        $this->loader->add_action('cron_schedules', $cwis_cron_class, 'cwis_scanner_cron_schedule');

        // Register a PHP function to handle the AJAX requests (with action="cwis_scanner").
        $this->loader->add_action('cwis_scheduled_events', $cwis_cron_class, 'cwis_scanner_cron_callback');
    }

    /**
     * Register all of the hooks related to the UPDATER functionality
     * of the plugin.
     *
     * @since   3.3.3
     * @access   private
     */
    private function define_updater_hooks()
    {
        $cwis_updater_class = $this->get_class_instance('Cwis_Updater');

        // Enable Wordpress core automatic updates via filter (no arguments expected).
        $this->loader->add_action('init', $cwis_updater_class, 'override_auto_core_updates');

        // Enable plugin automatic background updates via filter (2 arguments expected).
        $this->loader->add_filter('auto_update_plugin', $cwis_updater_class, 'override_auto_plugin_updates', 10, 2);

        // Enable theme automatic background updates via filter (2 arguments expected).
        $this->loader->add_filter('auto_update_theme', $cwis_updater_class, 'override_auto_theme_updates', 10, 2);

        // Overrides the WordPress.org API plugins update check (2 arguments expected).
        $this->loader->add_filter('http_request_args', $cwis_updater_class, 'override_api_update_check', 10, 2);
    }

    /**
     * Run the loader to execute all of the hooks with WordPress.
     *
     * @since    1.0.0
     */
    public function run()
    {
        $this->loader->run();
    }

    /**
     * The reference to the class that orchestrates the hooks with the plugin.
     *
     * @since     1.0.0
     * @return    Cwis_Loader    Orchestrates the hooks of the plugin.
     */
    public function get_loader()
    {
        return $this->loader;
    }

}
